#! /usr/bin/env node

// Âø´ÈÄüpush Âà∞gitÊúçÂä°Âô®ËÑöÊú¨
const childProcess = require('child_process');
const program = require('commander');
const ora = require('ora');
const {promisify} = require('util');
const {execSync} = childProcess;
// const exec = promisify(childProcess.exec);
const exec = async function (...args){
    return new Promise((resolve, reject) => {
        childProcess.exec(...args, (err, stdout, stderr) => {
            if(err) return reject(err);
            resolve(stdout);
            console.log(stdout);
            console.log(stderr);
        });
    })
};

module.exports = async function (pull) {
    const types = [
        {name: 'first', emoji: 'üéâ', emojiCode: 'tada', description: 'Initial commit'},
        {name: 'feat', emoji: '‚ú®', emojiCode: 'sparkles', description: 'Ê∑ªÂä†Êñ∞ÂäüËÉΩ'},
        {name: 'feature', emoji: '‚ú®', emojiCode: 'sparkles', description: 'Ê∑ªÂä†Êñ∞ÂäüËÉΩ'},
        {name: 'fix', emoji: 'üöë', emojiCode: 'ambulance', description: 'Bug‰øÆÂ§ç'},
        {name: 'docs', emoji: 'üìù', emojiCode: 'pencil', description: 'Êï¥ÁêÜÊñáÊ°£'},
        {name: 'style', emoji: 'üé®', emojiCode: 'art', description: '‰ª£Á†ÅÊ†ºÂºèÂåñ'},
        {name: 'refa', emoji: 'üî®', emojiCode: 'hammer', description: '‰ª£Á†ÅÈáçÊûÑ'},
        {name: 'refactor', emoji: 'üî®', emojiCode: 'hammer', description: '‰ª£Á†ÅÈáçÊûÑ'},
        {name: 'test', emoji: '‚úÖ', emojiCode: 'white_check_mark', description: 'Â¢ûÂä†ÊµãËØï'},
        {name: 'chore', emoji: 'üê≥', emojiCode: 'whale', description: '‰øÆÊîπÊûÑÂª∫ËøáÁ®ãÊàñËæÖÂä©Â∑•ÂÖ∑'},
        {name: 'deploy', emoji: 'üîñ', emojiCode: 'bookmark', description: 'ÈÉ®ÁΩ≤'},
        {name: 'build', emoji: 'üöÄ', emojiCode: 'rocket', description: 'ÊûÑÂª∫'},
    ];

    const maxNameLength = Math.max(...types.map(item => item.name.length));

    program
        .version(require('./package').version)
        .usage(`
    [message]
    
    ËØ¥ÊòéÔºö
      Á©∫Ê†º ËΩ¨‰∏∫Êç¢Ë°å
    
    Êèê‰∫§Á±ªÂûãÔºö
      ${types.map(item => `${item.name.padEnd(maxNameLength)}: ${item.emoji} ${item.description}`).join('\n      ')}
    `)
        .option('-m, --message <Ê≥®Èáä>  ', 'Êèê‰∫§Ê≥®Èáä')
        .parse(process.argv);

    let message = program.message;

    if (!message) {
        const [, , ...messages] = process.argv;
        message = messages.filter(item => item !== '-p' && item !== '--p').join(' ');
    }

    // message ÈªòËÆ§‰ª£Á†ÅÈáçÊûÑ
    let msg;
    if (!message) message = 'refa';

    const messages = message.split(' ');

    // Âè™Êúâ‰∏ÄË°å fix:Bug‰øÆÂ§ç fixÔºöBug‰øÆÂ§ç fixBug‰øÆÂ§ç
    if (messages.length === 1) {
        const m = messages[0];
        types.forEach(item => {
            const {name, emojiCode, description} = item;
            if (m.indexOf(`${name}:`) !== -1) return msg = `:${emojiCode}: ${m.replace(name + ':', '') || description}`;
            if (m.indexOf(`${name}Ôºö`) !== -1) return msg = `:${emojiCode}: ${m.replace(name + 'Ôºö', '') || description}`;
            if (m.indexOf(`${name}`) !== -1) return msg = `:${emojiCode}: ${m.replace(name + '', '') || description}`;
        });
    }
    // type‰πãÂêéÊúâÁ©∫Ê†º fix Bug‰øÆÂ§ç
    if (messages.length > 1) {
        const [m, m2, ...others] = messages;

        types.forEach(item => {
            const {name, emojiCode} = item;
            if (m.indexOf(`${name}:`) !== -1) return msg = `:${emojiCode}: ${m2}\n${others.join('\n')}`;
            if (m.indexOf(`${name}Ôºö`) !== -1) return msg = `:${emojiCode}: ${m2}\n${others.join('\n')}`;
            if (m.indexOf(`${name}`) !== -1) return msg = `:${emojiCode}: ${m2}\n${others.join('\n')}`;
        });
    }

    // Ê≤°Êúâtype
    if (!msg) msg = messages.join('\n');

    const spinner = ora('Loading...');
    spinner.color = 'yellow';

    try {
        const branch = execSync('git branch');
        const currentBranch = branch.toString().replace('*', '').trim();

        if (pull) {
            spinner.text = 'üöö git pull';
            spinner.start();
            await exec(`git pull`, {stdio: [0, 1, 2]});
            console.log(); // Êç¢Ë°å
            spinner.stop();
        }

        spinner.text = '‚ú®  git add .';
        spinner.start();
        await exec(`git add .`, {stdio: [0, 1, 2]});
        console.log(); // Êç¢Ë°å
        spinner.stop();

        spinner.text = 'üî• git commit';
        spinner.start();
        await exec(`git commit -m '${msg}'`, {stdio: [0, 1, 2]});
        console.log();
        spinner.stop();

        spinner.text = `üöÄ git push origin ${currentBranch} `;
        spinner.start();
        await exec(`git push origin ${currentBranch} `, {stdio: [0, 1, 2]});
        console.log();
        spinner.stop();

        console.log('üéâ Successfully!');
    } catch (e) {
        // console.error(e);
        spinner.stop();
        console.log();
        console.log('üö® Something Wrong!');
    }

};
